package io.documentnode.epub4j.domain

import io.documentnode.epub4j.util.StringUtil
import java.io.Serializable
import javax.xml.namespace.QName

/**
 * A Book's collection of Metadata.
 * In the future it should contain all Dublin Core attributes, for now
 * it contains a set of often-used ones.
 *
 * @author paul
 */
class Metadata : Serializable {
    private var isAutoGeneratedId: Boolean = true

    private var authors: MutableList<Author> = mutableListOf()
    private var contributors: MutableList<Author> = mutableListOf()
    private var dates: MutableList<Date> = mutableListOf()
    
    var language: String = DEFAULT_LANGUAGE

    /**
     * Metadata properties not hard-coded like the author, title, etc.
     *
     * @return Metadata properties not hard-coded like the author, title, etc.
     */
    var otherProperties: Map<QName, String> = emptyMap()
    
    internal var rights: List<String> = listOf()
    private var titles: MutableList<String> = mutableListOf()
    private var identifiers: MutableList<Identifier> = mutableListOf(Identifier())
    
    var subjects: List<String> = emptyList()
    var format: String = MediaTypes.EPUB.name
    private var types: MutableList<String> = mutableListOf()
    private var descriptions: MutableList<String> = mutableListOf()
    private var publishers: MutableList<String> = mutableListOf()
    private var metaAttributes: Map<String, String> = emptyMap()


    fun addDate(date: Date): Date {
        dates.add(date)
        return date
    }

    fun getDates(): List<Date> {
        return dates
    }

    fun setDates(dates: List<Date>) {
        this.dates = dates.toMutableList()
    }

    fun addAuthor(author: Author): Author {
        authors.add(author)
        return author
    }

    fun getAuthors(): List<Author> {
        return authors
    }

    fun setAuthors(authors: List<Author>) {
        this.authors = authors.toMutableList()
    }

    fun addContributor(contributor: Author): Author {
        contributors.add(contributor)
        return contributor
    }

    fun getContributors(): List<Author> {
        return contributors
    }

    fun setContributors(contributors: List<Author>) {
        this.contributors = contributors.toMutableList()
    }
    
    val firstTitle: String
        /**
         * Gets the first non-blank title of the book.
         * Will return "" if no title found.
         *
         * @return the first non-blank title of the book.
         */
        get() {
            return if (titles.isEmpty()) {
                ""
            } else {
                titles.firstOrNull(String::isNotEmpty) ?: ""
            }
        }

    fun addTitle(title: String): String {
        titles.add(title)
        return title
    }

    fun setTitles(titles: List<String>) {
        this.titles = titles.toMutableList()
    }

    fun getTitles(): List<String> {
        return titles
    }

    fun addPublisher(publisher: String): String {
        publishers.add(publisher)
        return publisher
    }

    fun setPublishers(publishers: List<String>) {
        this.publishers = publishers.toMutableList()
    }

    fun getPublishers(): List<String> {
        return publishers
    }

    fun addDescription(description: String): String {
        descriptions.add(description)
        return description
    }

    fun setDescriptions(descriptions: List<String>) {
        this.descriptions = descriptions.toMutableList()
    }

    fun getDescriptions(): List<String> {
        return descriptions
    }

    fun addIdentifier(identifier: Identifier): Identifier {
        if (isAutoGeneratedId && identifiers.isNotEmpty()) {
            identifiers[0] = identifier
        } else {
            identifiers.add(identifier)
        }
        isAutoGeneratedId = false
        return identifier
    }

    fun setIdentifiers(identifiers: List<Identifier>) {
        this.identifiers = identifiers.toMutableList()
        isAutoGeneratedId = false
    }

    fun getIdentifiers(): List<Identifier> {
        return identifiers
    }

    fun addType(type: String): String {
        types.add(type)
        return type
    }

    fun getTypes(): List<String> {
        return types
    }

    fun setTypes(types: List<String>) {
        this.types = types.toMutableList()
    }

    fun getMetaAttribute(name: String): String? {
        return metaAttributes[name]
    }

    fun setMetaAttributes(metaAttributes: Map<String, String>) {
        this.metaAttributes = metaAttributes
    }

    fun setRights(rights: List<String>) {
        this.rights = rights
    }

    companion object {
        private const val serialVersionUID = -2437262888962149444L

        const val DEFAULT_LANGUAGE: String = "en"
    }
}
